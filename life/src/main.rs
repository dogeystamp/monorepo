#![deny(rust_2018_idioms)]

use std::io::stdin;

const WIDTH: usize = 120;
const HEIGHT: usize = 30;

const DIRS: [(i32, i32); 8] = [
    (-1, 1),
    (0, 1),
    (1, 1),
    (-1, 0),
    (1, 0),
    (-1, -1),
    (0, -1),
    (1, -1),
];

#[derive(Clone)]
struct Cells {
    field: [[bool; WIDTH]; HEIGHT],
}

impl Cells {
    fn shift(x: usize, y: usize, a: i32, b: i32) -> (usize, usize) {
        //! Modulo offset of coordinate.
        (
            (x as i32 + a).rem_euclid(HEIGHT as i32) as usize,
            (y as i32 + b).rem_euclid(WIDTH as i32) as usize,
        )
    }

    fn neighbour(&self, x: usize, y: usize) -> i32 {
        //! Sum of neighbourhood.
        DIRS.iter()
            .map(|(a, b)| Self::shift(x, y, *a, *b))
            .map(|(x, y)| self.field[x][y] as i32)
            .sum()
    }

    pub fn update(&mut self) {
        //! Iterate once.

        let last_field = self.clone();

        for i in 0..HEIGHT {
            for j in 0..WIDTH {
                let was_alive = last_field.field[i][j];
                let neighbours = last_field.neighbour(i, j);
                let alive = (neighbours == 2 && was_alive) || (neighbours == 3);
                self.field[i][j] = alive;
            }
        }
    }

    pub fn print(&self) {
        //! Print field.
        for row in self.field {
            let ln = row.map(|x| if x { "#" } else { "." }).concat();
            println!("{ln}");
        }
    }

    pub fn from_str(str: String) -> Cells {
        //! Create field based on a string.
        let mut field = [[false; WIDTH]; HEIGHT];
        for (i, ln) in str.lines().filter(|ln| !ln.is_empty()).enumerate() {
            for (j, chr) in ln.chars().enumerate() {
                field[i][j] = chr == '#';
            }
        }

        Cells { field }
    }
}

const INIT_FIELD: &str = "
...............
...............
...............
...............
...............
...............
...............
.....#.........
.....#.#.......
.....##........
...............
...............
...............
...............
...............";

const INIT_FIELD2: &str = "
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
........................................................................................................................
..................###...............###....................##..##.......................................................
.................#...#.............#...#.....................##.........................................................
................##....#...........#....##....................##.........................................................
...............#.#.##.##...###...##.##.#.#................#.#..#.#......................................................
..............##.#....#.##.###.##.#....#.##...............#......#......................................................
.............#....#...#....#.#....#...#....#............................................................................
.........................#.....#..........................#......#......................................................
.............##.......##.........##.......##...............##..##.......................................................
............................................................####........................................................
........................................................................................................................
.............................................................##.........................................................
.............................................................##.........................................................
........................................................................................................................
";
fn cls() {
    //! Clear screen.
    print!("{esc}[2J{esc}[1;1H", esc = 27 as char);
}

fn main() {
    let mut cells = Cells::from_str(INIT_FIELD2.into());
    loop {
        cls();
        cells.print();
        cells.update();

        // wait for enter
        let mut _line = String::new();
        stdin().read_line(&mut _line).unwrap();
    }
}
